{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hok/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","className","styles","dialog","active","id","name","Message","message","maxLength20","maxLengthCreater","DialogsFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","Dialogs","dialogsElements","dialogsPage","dialogsData","map","key","messagesElements","messagesData","dialogs","dialogsItems","messages","values","addMessage","newMessageBody","compose","dispatch","addMessageAC"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sICQ9KC,EAA6B,SAACC,GAAD,MAA+C,CAC5EC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAqC,IAC5DC,EAD2D,4JAE7D,WACI,OAAKC,KAAKC,MAAMN,OACT,kBAACG,EAAcE,KAAKC,OADI,kBAAC,IAAD,CAAUC,GAAG,eAHa,GACjCC,IAAML,WAQtC,OADqCM,YAAQX,EAARW,CAAoCL,K,+FCH9DM,EARK,SAACJ,GACjB,OACI,yBAAKK,UAAWC,IAAOC,OAAS,IAAMD,IAAOE,QACzC,kBAAC,IAAD,CAASP,GAAI,YAAcD,EAAMS,IAAKT,EAAMU,QCOzCC,EAZC,SAACX,GACb,OAEQ,yBAAKK,UAAWC,IAAOM,SAClBZ,EAAMY,U,kCC0DjBC,EAAcC,YAAiB,IAexBC,EAAmBC,YAAwB,CAACC,KAAM,wBAA/BD,EAbyC,SAAChB,GACtE,OAAO,0BAAMkB,SAAUlB,EAAMmB,cACzB,6BACI,kBAACC,EAAA,EAAD,CAAOC,YAAa,qBAAsBC,UAAWC,IAC9Cb,KAAM,iBAAmBc,SAAU,CAACC,IAAUZ,MAEzD,6BACI,4CASGa,EA3EC,SAAC1B,GAEb,IAAI2B,EAAkB3B,EAAM4B,YAAYC,YAAYC,KAAI,SAAAvB,GAAM,OAAI,kBAAC,EAAD,CAAYG,KAAMH,EAAOG,KAAMD,GAAIF,EAAOE,GAC9BsB,IAAKxB,EAAOE,QACtFuB,EAAmBhC,EAAM4B,YAAYK,aAAaH,KAAI,SAAAlB,GAAO,OAAI,kBAAC,EAAD,CAASA,QAASA,EAAQA,QACjBmB,IAAKnB,EAAQH,QA2B3F,OACI,yBAAKJ,UAAWC,IAAO4B,SACnB,yBAAK7B,UAAWC,IAAO6B,cAClBR,GAEL,yBAAKtB,UAAWC,IAAO8B,UAClBJ,EACD,kBAACjB,EAAD,CAAkBG,SAbR,SAACmB,GACrBrC,EAAMsC,WAAWD,EAAOE,sB,wBCyBfC,sBACXrC,aAvBkB,SAACV,GACnB,MAAO,CACHmC,YAAanC,EAAMmC,gBAIF,SAACa,GACtB,MAAO,CACHH,WAAY,SAACC,GACTE,EAASC,YAAaH,SAe9B3C,IAFW4C,CAGbd","file":"static/js/4.4e44a48f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__UjAMQ\",\"dialogsItems\":\"Dialogs_dialogsItems__2JF7_\",\"active\":\"Dialogs_active__tLwvh\",\"messages\":\"Dialogs_messages__2kCeb\",\"message\":\"Dialogs_message__1JGB4\"};","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component: React.ComponentClass) => {\r\n    class RedirectComponent extends React.Component<mapStateToPropsType> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from \"react\";\r\nimport styles from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    name: string,\r\n    id: string\r\n}\r\n\r\n\r\n const DialogItem = (props: PropsType) => {\r\n    return (\r\n        <div className={styles.dialog + ' ' + styles.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport styles from \"./../Dialogs.module.css\"\r\n\r\n\r\ntype PropsType1 = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: PropsType1) => {\r\n    return (\r\n\r\n            <div className={styles.message}>\r\n                {props.message}\r\n            </div>\r\n\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport styles from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsContainerPropsType} from \"./DialogsContainer\";\r\nimport {Field, FormSubmitHandler, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../assets/formsControls/FormsControls\";\r\nimport {maxLengthCreater, required} from \"../../utils(validator)/validators\";\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs = (props: DialogsContainerPropsType) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogsData.map(dialog => <DialogItem name={dialog.name} id={dialog.id}\r\n                                                                                  key={dialog.id}/>);\r\n    let messagesElements = props.dialogsPage.messagesData.map(message => <Message message={message.message}\r\n                                                                                  key={message.id}/>);\r\n\r\n\r\n   /* const addMessage = () => {\r\n        props.addMessage()\r\n        // props.dispatch({type: 'ADD-MESSAGE'})\r\n        // props.dispatch(addMessageAC())\r\n    }*/\r\n\r\n   /* const updateMessage = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        const newMessage = e.currentTarget.value\r\n        props.updateMessage(newMessage)\r\n        // props.dispatch({type: 'UPDATE-MESSAGE-TEXT', newMessage})\r\n        // props.dispatch(updateMessageAC(newMessage))\r\n    }*/\r\n\r\n  /*  const onKeyPressHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addMessage()\r\n        }\r\n    }*/\r\n    const addNewMessage = (values: FormDataType) => {\r\n      props.addMessage(values.newMessageBody)\r\n    }\r\n\r\n    // if(!props.asAuth) return <Redirect to={'/login'} />\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={styles.messages}>\r\n                {messagesElements}\r\n                <DialogsFormRedux onSubmit={addNewMessage} />\r\n\r\n                {/* <div>\r\n                    <textarea value={props.dialogsPage.newMessage}\r\n                              onChange={updateMessage}\r\n                              onKeyPress={onKeyPressHandler}\r\n                              placeholder={'Enter your message'}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button onClick={addMessage}>Add</button>\r\n                </div>*/}\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nconst maxLength20 = maxLengthCreater(20)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field placeholder={'Enter your message'} component={Textarea}\r\n                   name={'newMessageBody'}  validate={[required, maxLength20]}/>\r\n        </div>\r\n        <div>\r\n            <button>Add</button>\r\n        </div>\r\n\r\n    </form>\r\n}\r\n\r\nexport const DialogsFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\n\r\nexport default Dialogs;\r\n\r\n// до 76 урока\r\n/*import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport styles from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsContainerPropsType} from \"./DialogsContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst Dialogs = (props: DialogsContainerPropsType) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogsData.map(dialog => <DialogItem name={dialog.name} id={dialog.id}\r\n                                                                                  key={dialog.id}/>);\r\n    let messagesElements = props.dialogsPage.messagesData.map(message => <Message message={message.message}\r\n                                                                                  key={message.id}/>);\r\n\r\n\r\n    const addMessage = () => {\r\n        props.addMessage()\r\n        // props.dispatch({type: 'ADD-MESSAGE'})\r\n        // props.dispatch(addMessageAC())\r\n    }\r\n\r\n    const updateMessage = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        const newMessage = e.currentTarget.value\r\n        props.updateMessage(newMessage)\r\n        // props.dispatch({type: 'UPDATE-MESSAGE-TEXT', newMessage})\r\n        // props.dispatch(updateMessageAC(newMessage))\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addMessage()\r\n        }\r\n    }\r\n\r\n    // if(!props.asAuth) return <Redirect to={'/login'} />\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={styles.messages}>\r\n                {messagesElements}\r\n\r\n\r\n                <div>\r\n                    <textarea value={props.dialogsPage.newMessage}\r\n                              onChange={updateMessage}\r\n                              onKeyPress={onKeyPressHandler}\r\n                              placeholder={'Enter your message'}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button onClick={addMessage}>Add</button>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Dialogs;*/\r\n","import React from \"react\";\r\nimport {addMessageAC, InitialStateType} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\r\n\r\n\r\n/*type PropsType = {\r\n    dialogsPage: DialogsPageType\r\n    // dispatch: (action: ActionTypePost | ActionTypeMessage) => void\r\n\r\n}*/\r\ntype mapStateToPropsType = {\r\n    dialogsPage: InitialStateType\r\n    // asAuth: boolean\r\n\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n    // updateMessage: (newMessage: string) => void\r\n}\r\n\r\n\r\nexport type DialogsContainerPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n/*const DialogsContainer = (props: PropsType) => {\r\n\r\n    const addMessage = () => {\r\n        props.dispatch(addMessageAC())\r\n    }\r\n\r\n    const updateMessage = (newMessage: string) => {\r\n        props.dispatch(updateMessageAC(newMessage))\r\n    }\r\n\r\n    return (\r\n        <Dialogs dialogsPage={props.dialogsPage} addMessage={addMessage} updateMessage={updateMessage}/>\r\n    );\r\n}*/\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        // asAuth: state.auth.isAuth\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addMessage: (newMessageBody: string) => {\r\n            dispatch(addMessageAC(newMessageBody))\r\n        },\r\n       /* updateMessage: (newMessage: string) => {\r\n            dispatch(updateMessageAC(newMessage))\r\n        }*/\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n\r\n\r\nexport default compose<React.ComponentClass>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}