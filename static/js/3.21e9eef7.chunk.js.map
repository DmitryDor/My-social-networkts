{"version":3,"sources":["hok/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","dispatsh","useDispatch","useState","status","setStatus","editMode","setEditMode","useEffect","onDoubleClick","value","onBlur","autoFocus","onChange","e","newValue","currentTarget","updateStatusTC","ProfileInfo","profile","Preloader","className","styles","descriptionBlock","src","photos","large","alt","updateStatus","contacts","facebook","github","lookingForAJobDescription","Post","dialog","message","likesCount","MyPosts","memo","postElements","postData","map","post","id","key","postsBlock","TextAreaFormRedux","onSubmit","addPost","posts","maxLength10","maxLengthCreater","reduxForm","form","console","log","handleSubmit","Field","placeholder","component","Textarea","name","validate","required","MyPostsContainer","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","match","params","aothorizedUserId","toString","setUsersProfile","compose","setUsersProfileTC","setStatusTC","withRouter"],"mappings":"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","file":"static/js/3.21e9eef7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component: React.ComponentClass) => {\r\n    class RedirectComponent extends React.Component<mapStateToPropsType> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__MRW8w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__34Czc\",\"posts\":\"MyPosts_posts__2r6qD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Post_dialog__dxR_H\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateStatusTC} from \"../../redux/profileReducer\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: PropsType) => {\r\n    const dispatsh = useDispatch()\r\n\r\n    let [status, setStatus] = useState<string>(props.status)\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const newValue = e.currentTarget.value\r\n        setStatus(newValue)\r\n        dispatsh(updateStatusTC(newValue))\r\n        // props.updateStatus(status)  // проверить, в таком случае последняя буква пропадает\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status}</span>\r\n                </div>\r\n            }\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input value={status} onBlur={deactivateEditMode} autoFocus onChange={onStatusChange}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport styles from \"./ProfileInfo.module.css\";\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\nimport {ProfileStatus} from \"../ProfileStatus\";\r\nimport {ProfileStatusWithHooks} from \"../ProfileStatusWithHooks\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: PropsType) => {\r\n    if (props.profile === null) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n           {/* <div>\r\n                <img src=\"https://www.w3schools.com/howto/img_snow_wide.jpg\"/>\r\n            </div>*/}\r\n            <div className={styles.descriptionBlock}>\r\n                <img src={props.profile.photos.large ? props.profile.photos.large : \"\" } alt={'Your photo'} />\r\n                {/*<ProfileStatus status={props.status || 'No status'} updateStatus={props.updateStatus }/>*/}\r\n                <ProfileStatusWithHooks status={props.status || 'No status'} updateStatus={props.updateStatus }/>\r\n                <div>{props.profile.contacts.facebook}</div>\r\n                <div>{props.profile.contacts.github}</div>\r\n                <div>{props.profile.lookingForAJobDescription}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport styles from \"./Post.module.css\";\r\n\r\ntype PropsType = {\r\n    message: string,\r\n    likesCount: number\r\n    id?: string\r\n}\r\n\r\n\r\nconst Post = (props: PropsType) => {\r\n\r\n    return (\r\n        <div className={styles.dialog}>\r\n            <img\r\n                src={\"https://avatars.mds.yandex.net/get-zen_doc/192582/pub_5c456a357211c900ae966091_5c456bc8d4fdd900b0ce9220/scale_1200\"}/>\r\n            {props.message}\r\n            <div>\r\n                <span>like </span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport styles from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/store\";\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {maxLengthCreater} from \"../../../utils(validator)/validators\";\r\nimport {required} from '../../../utils(validator)/validators'\r\nimport {Textarea} from \"../../../assets/formsControls/FormsControls\";\r\n\r\ntype PropsType = {\r\n    postData: Array<PostType>\r\n    // newPostText: string\r\n    addPost: (post: string) => void\r\n    // updateNewPostText: (newText: string) => void\r\n}\r\ntype FormDataType = {\r\n    post: string\r\n}\r\n\r\n\r\nconst MyPosts = React.memo((props: PropsType) => {\r\n\r\n\r\n    let postElements = props.postData.map(post => <Post message={post.message} likesCount={post.likesCount}\r\n                                                        id={post.id} key={post.id}/>);\r\n\r\n\r\n    const onSubmit =   (value: FormDataType) => {\r\n        props.addPost(value.post)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={styles.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n\r\n                <TextAreaFormRedux onSubmit={onSubmit}/>\r\n\r\n            </div>\r\n            <div className={styles.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\nconst maxLength10 = maxLengthCreater(10)\r\n\r\nconst TextAreaForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    console.log('Rendering')\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field  placeholder='Enter your post' component={Textarea} name={'post'}\r\n                    validate={[required, maxLength10]}/>\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst TextAreaFormRedux = reduxForm<FormDataType>({form: 'MyPosts'})(TextAreaForm)\r\n\r\nexport default MyPosts;\r\n\r\n//до 76 урока\r\n/*\r\nimport React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport styles from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/store\";\r\n\r\n\r\ntype PropsType = {\r\n    postData: Array<PostType>\r\n    newPostText: string\r\n    addPost: () => void\r\n    updateNewPostText: (newText: string) => void\r\n}\r\n\r\n\r\nconst MyPosts = (props: PropsType) => {\r\n\r\n\r\n    let postElements = props.postData.map(post => <Post message={post.message} likesCount={post.likesCount}\r\n                                                        id={post.id} key={post.id}/>);\r\n\r\n\r\n    const addPost = () => {\r\n        props.addPost()\r\n        // props.dispatch({type: \"ADD-POST\"})\r\n        // props.dispatch(AddPostAC())\r\n    }\r\n\r\n    const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        const newText = e.currentTarget.value\r\n        props.updateNewPostText(newText)\r\n        // props.dispatch(UpdateNewPostTextAC(newText))\r\n    }\r\n\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addPost()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n\r\n                <div>\r\n                    <textarea value={props.newPostText} onChange={onPostChange}\r\n                              placeholder={'Enter your post'} onKeyPress={onKeyPressHandler}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <button onClick={addPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={styles.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default MyPosts;*/\r\n","import React from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport MyPostsClass from \"./MyPostsClass\";\r\nimport {addPostAC} from \"../../../redux/profileReducer\";\r\n\r\n\r\n/*type PropsType = {\r\n    postData: Array<PostType>\r\n    newPostText: string\r\n    dispatch: (action: ActionTypePost | ActionTypeMessage) => void\r\n}\r\n\r\n\r\nconst MyPostsContainer = (props: PropsType) => {\r\n\r\n    const addPost = () => {\r\n        // props.addPost()\r\n        // props.dispatch({type: \"ADD-POST\"})\r\n        props.dispatch(AddPostAC())\r\n    }\r\n\r\n    const onPostChange = (newText: string) => {\r\n        // const newText = e.currentTarget.value\r\n        // props.updateNewPostText(newText)\r\n        props.dispatch(UpdateNewPostTextAC(newText))\r\n    }\r\n\r\n    return (\r\n        <MyPosts postData={props.postData} newPostText={props.newPostText}\r\n                 addPost={addPost} updateNewPostText={onPostChange}/>\r\n    );\r\n}*/\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return ({\r\n        postData: state.profilePage.postData\r\n        // newPostText: state.profilePage.newPostText\r\n    })\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return ({\r\n        addPost: (post: string) => {\r\n            dispatch(addPostAC(post))\r\n        }\r\n        /*updateNewPostText: (newText: string) => {\r\n            dispatch(UpdateNewPostTextAC(newText))\r\n        }*/\r\n    })\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profileReducer\";\r\n\r\ntype PropsType = {\r\n\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\nconst Profile = (props: PropsType) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\n\r\nimport Profile from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    ProfileType,\r\n    setStatusTC,\r\n    setUsersProfileTC,\r\n    updateStatusTC\r\n} from \"../../redux/profileReducer\";\r\nimport {withRouter, RouteComponentProps, Redirect} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n// type OwnPropsType = {}\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    aothorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    // setUserProfile: (profile: ProfileType) => void\r\n    setUsersProfile: (userId: string) => void\r\n    setStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & PropsType\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            // userId= '9455'\r\n            this.props.aothorizedUserId && (userId = (this.props.aothorizedUserId).toString())\r\n        }\r\n        this.props.setUsersProfile(userId)\r\n        this.props.setStatus(userId)\r\n\r\n\r\n        // this.props.updateStatus(this.props.status)\r\n\r\n        /*  let userId = this.props.match.params.userId\r\n          /!* if (!userId) {\r\n               userId = '2'\r\n           }*!/\r\n          profileAPI.getProfiles(userId)\r\n              .then(res => {\r\n\r\n                  this.props.setUserProfile(res.data)\r\n              })*/\r\n    }\r\n\r\n    render() {\r\n\r\n        // if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return (\r\n            <Profile  {...this.props}/>\r\n        );\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        aothorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n\r\nexport default compose<React.ComponentClass>(\r\n    connect(mapStateToProps, {\r\n        setUsersProfile: setUsersProfileTC,\r\n        setStatus: setStatusTC,\r\n        updateStatus: updateStatusTC\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n/*\r\nconnect(mapStateToProps, {\r\n    // setUserProfile: setUserProfileAC\r\n    setUsersProfile: setUsersProfileTC\r\n})(WithUrlDataContainerComponent)*/\r\n"],"sourceRoot":""}